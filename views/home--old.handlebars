<div class="container">
    <!--<input id="timeLastUpdate" type="hidden" value="{{timeLastUpdate}}">-->
    <div class="heroBar">
        <h1>Ações Bovespa</h1>
        <p>Última atualização dos preços há <span id="time"></span> min</p>
    </div>
    <div class="block">
        {{#each acoes}}
        <div class="acao">
            <div class="name">{{this.name}}</div>
            <div class="code">{{this.code}}</div>
            <div class="price">buscando...</div>
            <div class="button">
                <a href="/acoes/detalhes/{{this.id}}">Detalhes</a>
            </div>
        </div>
        {{/each}}
    </div>
</div>
<script>
     // inicia o processo de busca das informações detalhadas da ação
    searchPrecos()

    setInterval(searchPrecos,15000)

    /* Esta função realiza a busca dos preços das ações carregadas na tela*/
    async function searchPrecos(){
        const url = 'https://valorinveste.globo.com/cotacoes/';
        const response = await fetch(`https://api.allorigins.win/get?charset=utf-8&url=${encodeURIComponent(url)}`)
        if (!response.ok) throw new Error('Network response was not ok.')
        const data = await response.json()
        // inicia o processo de preenchimento dos preços na tela
        scrapingData(data.contents)
    }

    /* Função que realiza o scraping nos preços retornados */
    function scrapingData(html) {
        // converte o texto da página html em uma estrutura DOM
        const doc = new DOMParser().parseFromString(html, "text/html");
        // captura a tabela as informações das ações
        const table = Array.from(
            doc.getElementById("cotacoes-intradia")
            .querySelectorAll('tbody')[0].children
        )
        let acoes = [] // array vazio para armazenar as ações
        // percorre cada uma das ações
        table.map((tr, index)=>{
            const code = tr.children[1].innerHTML.trim()
            const price = tr.children[2].innerHTML.trim()
            const acao = {code,price}
            acoes.push(acao) 
        })
        fillData(acoes)
    }

    /* preenhe os preços das ações na tela*/
    function fillData(acoes){
        const acoesDOM = Array.from(document.getElementsByClassName('acao'))
        acoesDOM.map((acaoDOM, index)=>{
            codeDOM = acaoDOM.children[1].innerHTML
            const price = getEachPrice(acoes, codeDOM)
            acaoDOM.children[2].innerHTML = price
        })
    }

    function getEachPrice(acoes, code){
        for(let acao of acoes){
            if(acao.code === code)
                return acao.price
        }
        return 'Sem preço!'
    }


    /* Este é a lógica do script que atualiza o horário desde a última atualização dos preços*/
    //const timeLastUpdate = new Date(document.getElementById("timeLastUpdate").value)
    const now = new Date()
    let segundosPassados = parseInt((now - timeLastUpdate) / 1000)
    let min = Math.floor(parseInt((segundosPassados/60))).toString()
    let seg = (segundosPassados%60).toString()
    min = min.length===1?`0${min}`:min
    seg = seg.length===1?`0${seg}`:seg
    document.getElementById("time").innerHTML= `${min}:${seg}`
    setInterval(updateTime,1000)
    */
    /* essa função altera, a cada segundo, o tempo passado
      e atualiza o horário desde a última atualização dos preços das ações*/
    /*function updateTime(){
        segundosPassados++
        let min = Math.floor(parseInt((segundosPassados/60))).toString()
        let seg = (segundosPassados%60).toString()
        min = min.length===1?`0${min}`:min
        seg = seg.length===1?`0${seg}`:seg
        document.getElementById("time").innerHTML= `${min}:${seg}`
        console.log(`${min}:${seg}`)
    }*/
</script>